// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SRM.Data;

namespace SRM.Data.Migrations
{
    [DbContext(typeof(SrmDbContext))]
    [Migration("20191008183000_somechanges")]
    partial class somechanges
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Fix.Security.AuthenticationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("ExpiredOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.ToTable("AuthenticationEntity");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id")
                        .HasName("PK_RoleId");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Permission")
                        .IsRequired();

                    b.Property<int>("RoleId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("MobilePhone");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Password");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.UserActivityLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<DateTime>("LastLoginOn");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("UserId");

                    b.HasKey("Id")
                        .HasName("PK_UserActivityLogId");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivityLog");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.UserInRole", b =>
                {
                    b.Property<int?>("RoleId");

                    b.Property<int?>("UserId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("RoleId", "UserId")
                        .HasName("PK_UserInRole");

                    b.HasAlternateKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserInRole");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressDirections")
                        .HasMaxLength(500);

                    b.Property<string>("AddressInfo")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Area");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LocationId");

                    b.Property<int?>("LocationRegionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("NeighborhoodId");

                    b.Property<int>("Priority");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationRegionId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("PlateCode");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CityId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("County");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<string>("ContentPath")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LessonSessionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("LessonSessionId");

                    b.ToTable("Document");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("Latitude")
                        .IsRequired();

                    b.Property<double>("LocationX");

                    b.Property<double>("LocationY");

                    b.Property<string>("Longitude")
                        .IsRequired();

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<int?>("CountyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("Neighborhood");
                });

            modelBuilder.Entity("SRM.Data.Models.ApplicationManagement.PageManagement.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ComponentName");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<int?>("ParentId");

                    b.Property<byte[]>("RowVersion");

                    b.Property<bool>("ShowOnMenu");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Page");
                });

            modelBuilder.Entity("SRM.Data.Models.ApplicationManagement.PageManagement.PageRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("PageId");

                    b.Property<int?>("RoleId");

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("PageId");

                    b.HasIndex("RoleId");

                    b.ToTable("PageRole");
                });

            modelBuilder.Entity("SRM.Data.Models.CallManagement.StudentPhoneCall", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CallType");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("ShuttleStudentOperationAdviceId");

                    b.Property<long?>("ShuttleStudentOperationId");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ShuttleStudentOperationAdviceId");

                    b.HasIndex("ShuttleStudentOperationId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPhoneCall");
                });

            modelBuilder.Entity("SRM.Data.Models.CorporationManagement.Corporation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LongName")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Corporation");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.Lesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Lesson");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.LessonContentDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid?>("DocumentId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LessonSessionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("LessonSessionId");

                    b.ToTable("LessonContentDocument");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.LessonSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("InstructorId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LessonId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("InstructorId");

                    b.HasIndex("LessonId");

                    b.ToTable("LessonSession");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.Parameters.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("SRM.Data.Models.HospitalAppointment.AppointmentStudent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("ComplatedTime");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("HospitalAppointmentInstitutionId");

                    b.Property<string>("IdentityNumber");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("MHRSPassword");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("NameSurname");

                    b.Property<int>("Order");

                    b.Property<int>("ProcessStatus");

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("HospitalAppointmentInstitutionId");

                    b.ToTable("AppointmentStudent");
                });

            modelBuilder.Entity("SRM.Data.Models.HospitalAppointment.AppointmentStudentHospitalRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AppointmentStudentId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("HospitalId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStudentId");

                    b.HasIndex("HospitalId");

                    b.ToTable("AppointmentStudentHospitalRelation");
                });

            modelBuilder.Entity("SRM.Data.Models.HospitalAppointment.HospitalAppointmentInstitution", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("InstitutionName");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("PriorityOrder");

                    b.Property<byte[]>("RowVersion");

                    b.HasKey("Id");

                    b.ToTable("HospitalAppointmentInstitution");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.Instructor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<DateTime>("HireDate");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Instructor");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.InstructorAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("InstructorId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorAddress");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.InstructorBranch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("InstructorId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("InstructorId");

                    b.ToTable("InstructorBranch");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.Parameters.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("Hospital");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.Parameters.ObstacleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("ObstacleType");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CourseStartDate");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateOfBirth");

                    b.Property<string>("Email");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasMaxLength(11);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("LocationRegionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("ParentName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ParentPhoneNumber")
                        .HasMaxLength(200);

                    b.Property<string>("Phone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("LocationRegionId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AddressId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAddress");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentAvailableTime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int?>("IncludedDateId");

                    b.Property<bool>("IsAvaible");

                    b.Property<bool>("IsDelete");

                    b.Property<bool>("IsIntegrated");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.Property<DateTime?>("StartTime");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("IncludedDateId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAvailableTime");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentContact");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentInstructorRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BranchId");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<long?>("InstructorId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Priority");

                    b.Property<byte[]>("RowVersion");

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentInstructorRelation");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentLesson", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LessonId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentLesson");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentLessonSession", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("LessonSessionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentLessonId");

                    b.HasKey("Id");

                    b.HasIndex("LessonSessionId");

                    b.HasIndex("StudentLessonId");

                    b.ToTable("StudentLessonSession");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentObstacleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int?>("ObstacleTypeId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ObstacleTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentObstacleType");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentReport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000);

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<DateTime>("EndDate");

                    b.Property<int?>("GivenHospitalId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("ReportNumber")
                        .IsRequired();

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("GivenHospitalId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentReport");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentReportDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<Guid?>("DocumentId");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentReportId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("StudentReportId");

                    b.ToTable("StudentReportDocument");
                });

            modelBuilder.Entity("SRM.Data.Models.Parameters.ApplicationParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Description")
                        .HasMaxLength(250);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.ToTable("ApplicationParameter");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.Parameters.LocationRegion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Code")
                        .HasMaxLength(5);

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.ToTable("LocationRegion");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.Parameters.LocationRegionRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("MainRegionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("SubRegionId");

                    b.HasKey("Id");

                    b.HasIndex("MainRegionId");

                    b.HasIndex("SubRegionId");

                    b.ToTable("LocationRegionRelation");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.Parameters.StudentService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int?>("DriverId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("MaxCapacity");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<string>("Plate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("StudentService");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<DateTime>("DateTime");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("LocationRegionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<DateTime?>("OperationEndTime");

                    b.Property<DateTime?>("OperationStartTime");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("ShuttleOperationStatus");

                    b.Property<int?>("ShuttleTemplateId");

                    b.Property<int?>("StudentServiceId");

                    b.HasKey("Id");

                    b.HasIndex("LocationRegionId");

                    b.HasIndex("ShuttleTemplateId");

                    b.HasIndex("StudentServiceId");

                    b.ToTable("ShuttleOperation");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperasionLessonRelation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<int>("CompletedLessonCount");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("PlannedLessonCount");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long>("ShuttleStudentOperationRef");

                    b.HasKey("Id");

                    b.HasIndex("ShuttleStudentOperationRef")
                        .IsUnique();

                    b.ToTable("ShuttleStudentOperasionLessonRelation");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsCompensation");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("OperationStatus");

                    b.Property<int>("Order");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("ShuttleOperationId");

                    b.Property<bool?>("Status");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ShuttleOperationId");

                    b.HasIndex("StudentId");

                    b.ToTable("ShuttleStudentOperation");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperationAdvice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AdviceStatus");

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DisContinuityCount");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("MounthlyDiscontinuityCount");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("ShuttleOperationId");

                    b.Property<long?>("ShuttleStudentOperationId");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ShuttleOperationId");

                    b.HasIndex("ShuttleStudentOperationId");

                    b.HasIndex("StudentId");

                    b.ToTable("ShuttleStudentOperationAdvice");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.StudentOperationLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsDelete");

                    b.Property<string>("LocationX");

                    b.Property<string>("LocationY");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<long?>("StudentOperationId");

                    b.HasKey("Id");

                    b.HasIndex("StudentOperationId");

                    b.ToTable("StudentOperationLocation");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleStudentTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<int>("LessonCount");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<int>("Order");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ShuttleTemplateId");

                    b.Property<long?>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("ShuttleTemplateId");

                    b.HasIndex("StudentId");

                    b.ToTable("ShuttleStudentTemplate");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<int>("DayOfWeek");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDelete");

                    b.Property<int?>("LocationRegionId");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("StudentServiceId");

                    b.Property<TimeSpan>("Time");

                    b.HasKey("Id");

                    b.HasIndex("LocationRegionId");

                    b.HasIndex("StudentServiceId");

                    b.ToTable("ShuttleTemplate");
                });

            modelBuilder.Entity("SRM.Data.Models.Times.DateCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyId");

                    b.Property<long>("CreatedBy");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsDelete");

                    b.Property<long?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<bool>("Monday");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.ToTable("DateCombination");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.RolePermission", b =>
                {
                    b.HasOne("SRM.Data.Models.Accounts.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.User", b =>
                {
                    b.HasOne("SRM.Data.Models.CorporationManagement.Corporation", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.UserActivityLog", b =>
                {
                    b.HasOne("SRM.Data.Models.Accounts.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FKB_UserActivityLog")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SRM.Data.Models.Accounts.UserInRole", b =>
                {
                    b.HasOne("SRM.Data.Models.Accounts.Role", "Role")
                        .WithMany("UserInRoles")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_UserInRole_Role")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SRM.Data.Models.Accounts.User", "User")
                        .WithMany("UserInRoles")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserInRole_User")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Address", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "LocationRegion")
                        .WithMany()
                        .HasForeignKey("LocationRegionId");

                    b.HasOne("SRM.Data.Models.Application.Neighborhood", "Neighborhood")
                        .WithMany()
                        .HasForeignKey("NeighborhoodId");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.County", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Document", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.LessonSession")
                        .WithMany("LessonContentDocuments")
                        .HasForeignKey("LessonSessionId");
                });

            modelBuilder.Entity("SRM.Data.Models.Application.Neighborhood", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");
                });

            modelBuilder.Entity("SRM.Data.Models.ApplicationManagement.PageManagement.Page", b =>
                {
                    b.HasOne("SRM.Data.Models.ApplicationManagement.PageManagement.Page", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("SRM.Data.Models.ApplicationManagement.PageManagement.PageRole", b =>
                {
                    b.HasOne("SRM.Data.Models.ApplicationManagement.PageManagement.Page", "Page")
                        .WithMany("PageRoles")
                        .HasForeignKey("PageId");

                    b.HasOne("SRM.Data.Models.Accounts.Role", "Role")
                        .WithMany("PageRoles")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("SRM.Data.Models.CallManagement.StudentPhoneCall", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleStudentOperationAdvice", "ShuttleStudentOperationAdvice")
                        .WithMany()
                        .HasForeignKey("ShuttleStudentOperationAdviceId");

                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleStudentOperation", "ShuttleStudentOperation")
                        .WithMany("StudentPhoneCalls")
                        .HasForeignKey("ShuttleStudentOperationId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.Lesson", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.Parameters.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.LessonContentDocument", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("SRM.Data.Models.Courses.LessonSession", "LessonSession")
                        .WithMany()
                        .HasForeignKey("LessonSessionId");
                });

            modelBuilder.Entity("SRM.Data.Models.Courses.LessonSession", b =>
                {
                    b.HasOne("SRM.Data.Models.Individuals.InstructorManagement.Instructor", "Instructor")
                        .WithMany("LessonSessions")
                        .HasForeignKey("InstructorId");

                    b.HasOne("SRM.Data.Models.Courses.Lesson", "Lesson")
                        .WithMany("LessonSessions")
                        .HasForeignKey("LessonId");
                });

            modelBuilder.Entity("SRM.Data.Models.HospitalAppointment.AppointmentStudent", b =>
                {
                    b.HasOne("SRM.Data.Models.HospitalAppointment.HospitalAppointmentInstitution", "HospitalAppointmentInstitution")
                        .WithMany("Students")
                        .HasForeignKey("HospitalAppointmentInstitutionId");
                });

            modelBuilder.Entity("SRM.Data.Models.HospitalAppointment.AppointmentStudentHospitalRelation", b =>
                {
                    b.HasOne("SRM.Data.Models.HospitalAppointment.AppointmentStudent", "AppointmentStudent")
                        .WithMany("AppointmentStudentHospitalRelations")
                        .HasForeignKey("AppointmentStudentId");

                    b.HasOne("SRM.Data.Models.Individuals.Parameters.Hospital", "Hospital")
                        .WithMany("AppointmentStudentHospitalRelations")
                        .HasForeignKey("HospitalId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.Instructor", b =>
                {
                    b.HasOne("SRM.Data.Models.Accounts.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.InstructorAddress", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SRM.Data.Models.Individuals.InstructorManagement.Instructor", "Instructor")
                        .WithMany("Addresses")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.InstructorManagement.InstructorBranch", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.Parameters.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("SRM.Data.Models.Individuals.InstructorManagement.Instructor", "Instructor")
                        .WithMany("Branches")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.Student", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "LocationRegion")
                        .WithMany("Students")
                        .HasForeignKey("LocationRegionId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentAddress", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("Addresses")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentAvailableTime", b =>
                {
                    b.HasOne("SRM.Data.Models.Times.DateCombination", "IncludedDate")
                        .WithMany()
                        .HasForeignKey("IncludedDateId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentContact", b =>
                {
                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("StudentContacts")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentInstructorRelation", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.Parameters.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("SRM.Data.Models.Individuals.InstructorManagement.Instructor", "Instructor")
                        .WithMany("StudentRelations")
                        .HasForeignKey("InstructorId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("InstructorRelations")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentLesson", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.Lesson", "Lesson")
                        .WithMany()
                        .HasForeignKey("LessonId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("Lessons")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentLessonSession", b =>
                {
                    b.HasOne("SRM.Data.Models.Courses.LessonSession", "LessonSession")
                        .WithMany("StudentLessonSessions")
                        .HasForeignKey("LessonSessionId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.StudentLesson", "StudentLesson")
                        .WithMany("LessonSessions")
                        .HasForeignKey("StudentLessonId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentObstacleType", b =>
                {
                    b.HasOne("SRM.Data.Models.Individuals.Parameters.ObstacleType", "ObstacleType")
                        .WithMany()
                        .HasForeignKey("ObstacleTypeId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("ObstacleTypes")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentReport", b =>
                {
                    b.HasOne("SRM.Data.Models.Individuals.Parameters.Hospital", "GivenHospital")
                        .WithMany()
                        .HasForeignKey("GivenHospitalId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("Reports")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Individuals.StudentManagement.StudentReportDocument", b =>
                {
                    b.HasOne("SRM.Data.Models.Application.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.StudentReport", "StudentReport")
                        .WithMany("Documents")
                        .HasForeignKey("StudentReportId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.Parameters.LocationRegionRelation", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "MainRegion")
                        .WithMany("RegionRelations")
                        .HasForeignKey("MainRegionId");

                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "SubRegion")
                        .WithMany()
                        .HasForeignKey("SubRegionId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.Parameters.StudentService", b =>
                {
                    b.HasOne("SRM.Data.Models.Accounts.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleOperation", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "LocationRegion")
                        .WithMany()
                        .HasForeignKey("LocationRegionId");

                    b.HasOne("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleTemplate", "ShuttleTemplate")
                        .WithMany()
                        .HasForeignKey("ShuttleTemplateId");

                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.StudentService", "StudentService")
                        .WithMany("ShuttleOperations")
                        .HasForeignKey("StudentServiceId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperasionLessonRelation", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleStudentOperation", "ShuttleStudentOperation")
                        .WithOne("LessonRelation")
                        .HasForeignKey("SRM.Data.Models.Shuttles.ShuttleStudentOperasionLessonRelation", "ShuttleStudentOperationRef")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperation", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleOperation", "ShuttleOperation")
                        .WithMany("ShuttleStudentOperations")
                        .HasForeignKey("ShuttleOperationId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.ShuttleStudentOperationAdvice", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleOperation", "ShuttleOperation")
                        .WithMany()
                        .HasForeignKey("ShuttleOperationId");

                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleStudentOperation", "ShuttleStudentOperation")
                        .WithMany()
                        .HasForeignKey("ShuttleStudentOperationId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.StudentOperationLocation", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.ShuttleStudentOperation", "StudentOperation")
                        .WithMany("StudentOperationLocations")
                        .HasForeignKey("StudentOperationId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleStudentTemplate", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleTemplate", "ShuttleTemplate")
                        .WithMany("ShuttleStudentTemplates")
                        .HasForeignKey("ShuttleTemplateId");

                    b.HasOne("SRM.Data.Models.Individuals.StudentManagement.Student", "Student")
                        .WithMany("ShuttleStudentTemplates")
                        .HasForeignKey("StudentId");
                });

            modelBuilder.Entity("SRM.Data.Models.Shuttles.TemplateManagement.ShuttleTemplate", b =>
                {
                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.LocationRegion", "LocationRegion")
                        .WithMany()
                        .HasForeignKey("LocationRegionId");

                    b.HasOne("SRM.Data.Models.Shuttles.Parameters.StudentService", "StudentService")
                        .WithMany("ShuttleTemplates")
                        .HasForeignKey("StudentServiceId");
                });
#pragma warning restore 612, 618
        }
    }
}
